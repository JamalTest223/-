// This is your Prisma schema file, now updated for MongoDB

generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Cities Table
model City {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  users User[]

  @@map("cities")
}

// Users Table
model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  email            String     @unique
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  date_of_birth    DateTime?
  name             String
  imageUrl         String?
  bio              String?
  city_id          String?    @db.ObjectId
  city             City?      @relation(fields: [city_id], references: [id])
  reviews          Review[]
  blogs            Blog[]
  favorites        Favorite[]

  role       Role?     @default(USER)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Comment    Comment[]

  @@map("users")
}

// Roles Table
enum Role {
  USER
  ADMIN
  WRITER
}

// Categories Table
model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  imageUrl   String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  podcasts   Podcast[]
  blogs      Blog[]

  @@map("categories")
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // Change to String for MongoDB ObjectId
  title       String
  content     String?
  slug        String
  updatedAt   DateTime @updatedAt
  imageUrl    String?
  created_at  DateTime @default(now())
  category_id String   @db.ObjectId
  user_id     String   @db.ObjectId
  category    Category @relation(fields: [category_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade) // This will delete the blog when the user is deleted

  comment Comment[]

  @@map("blogs")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  comment    String?
  created_at DateTime @default(now())
  user_id    String   @db.ObjectId
  blog_id    String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id])
  blog       Blog     @relation(fields: [blog_id], references: [id])

  @@unique([user_id, blog_id])
  @@map("comments")
}

// Podcasts Table
model Podcast {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  cover_image String?
  audio       String
  isFeatured  Boolean? @default(false)
  created_at  DateTime @default(now())
  videoUrl    String?
  category_id String   @db.ObjectId
  category    Category @relation(fields: [category_id], references: [id])

  guestName String?

  views_count Int @default(0)

  reviews   Review[]
  favorites Favorite[]

  @@map("podcasts")
}

// Reviews Table
model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewText String?
  created_at DateTime @default(now())
  user_id    String   @db.ObjectId
  podcast_id String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id])
  podcast    Podcast  @relation(fields: [podcast_id], references: [id])

  @@unique([user_id, podcast_id])
  @@map("reviews")
}

// Favorites Table
model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  podcast_id String   @db.ObjectId
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  podcast    Podcast  @relation(fields: [podcast_id], references: [id], onDelete: Cascade)
  updated_at DateTime @updatedAt

  @@unique([user_id, podcast_id])
  @@map("favorites")
}
